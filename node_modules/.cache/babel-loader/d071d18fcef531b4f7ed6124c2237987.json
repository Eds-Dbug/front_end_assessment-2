{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\edgar\\\\Documents\\\\Code\\\\front_end_assessment-2\\\\src\\\\components\\\\TagsInput.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport TagContext from '../context/TagContext';\nimport '../css/style.css';\n/**\r\n * @returns A form for tags to be added.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TagsInput = () => {\n  /**\r\n   *\r\n   * @param {Array} tags - An array (state) of all the stored tags.\r\n   * @param {Function} onChangeSetTags - A function that sets the state of the tags array.\r\n   * @returns A tag\r\n   */\n  const addTag = (tags, onChangeSetTags) => {\n    return event => {\n      if (event.key !== 'Enter') return;\n      const keyValue = event.target.value;\n      if (!keyValue.trim()) return;\n      onChangeSetTags([...tags, keyValue]);\n      event.target.value = '';\n    };\n  }; // /**\n  //  *\n  //  * @param {Array} tags - An array (state) of all the stored tags.\n  //  * @param {Function} onChangeSetTags - A function that sets the state of the tags array.\n  //  * @param {Number} index - The index of the individual tag to be removed.\n  //  */\n  // const removeTag = (tags, onChangeSetTags, index) => {\n  // \tonChangeSetTags(tags.filter((item, i) => index !== i));\n  // };\n\n  /**\r\n   *\r\n   * @param {Object} tagInfo - the information on the individual tag.\r\n   * @param {Array} tags - An array (state) of all the stored tags.\r\n   * @returns A rendered form of tags.\r\n   */\n\n\n  const renderTag = tagInfo => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex flex-column \",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tags-input-container d-flex flex-row w-50 mt-2 mb-1\",\n        children: tagInfo.tags.map((tag, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tag-item rounded p-2 m-1\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \" tag-item-text\",\n            children: tag\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 8\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 7\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"tags-input \",\n        onKeyDown: addTag(tagInfo.tags, tagInfo.onChangeSetTags),\n        type: \"text\",\n        placeholder: \"Add a tag\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(TagContext.Consumer, {\n    children: tagInfo => renderTag(tagInfo)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 3\n  }, this);\n};\n_c = TagsInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"TagsInput\");","map":{"version":3,"sources":["C:/Users/edgar/Documents/Code/front_end_assessment-2/src/components/TagsInput.js"],"names":["React","useState","useEffect","useRef","TagContext","TagsInput","addTag","tags","onChangeSetTags","event","key","keyValue","target","value","trim","renderTag","tagInfo","map","tag","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAO,kBAAP;AAEA;AACA;AACA;;;AACA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC9B;AACD;AACA;AACA;AACA;AACA;AACC,QAAMC,MAAM,GAAG,CAACC,IAAD,EAAOC,eAAP,KAA2B;AACzC,WAAQC,KAAD,IAAW;AACjB,UAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;AAC3B,YAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CAAaC,KAA9B;AACA,UAAI,CAACF,QAAQ,CAACG,IAAT,EAAL,EAAsB;AACtBN,MAAAA,eAAe,CAAC,CAAC,GAAGD,IAAJ,EAAUI,QAAV,CAAD,CAAf;AACAF,MAAAA,KAAK,CAACG,MAAN,CAAaC,KAAb,GAAqB,EAArB;AACA,KAND;AAOA,GARD,CAP8B,CAiB9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACD;AACA;AACA;AACA;AACA;;;AACC,QAAME,SAAS,GAAIC,OAAD,IAAa;AAC9B,wBACC;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,8BACC;AAAK,QAAA,SAAS,EAAC,qDAAf;AAAA,kBACEA,OAAO,CAACT,IAAR,CAAaU,GAAb,CAAiB,CAACC,GAAD,EAAMC,KAAN,kBACjB;AAAK,UAAA,SAAS,EAAC,0BAAf;AAAA,iCACC;AAAM,YAAA,SAAS,EAAC,gBAAhB;AAAA,sBAAkCD;AAAlC;AAAA;AAAA;AAAA;AAAA;AADD,WAA+CC,KAA/C;AAAA;AAAA;AAAA;AAAA,gBADA;AADF;AAAA;AAAA;AAAA;AAAA,cADD,eAgBC;AACC,QAAA,SAAS,EAAC,aADX;AAEC,QAAA,SAAS,EAAEb,MAAM,CAACU,OAAO,CAACT,IAAT,EAAeS,OAAO,CAACR,eAAvB,CAFlB;AAGC,QAAA,IAAI,EAAC,MAHN;AAIC,QAAA,WAAW,EAAC;AAJb;AAAA;AAAA;AAAA;AAAA,cAhBD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAyBA,GA1BD;;AA4BA,sBACC,QAAC,UAAD,CAAY,QAAZ;AAAA,cAAuBQ,OAAD,IAAaD,SAAS,CAACC,OAAD;AAA5C;AAAA;AAAA;AAAA;AAAA,UADD;AAGA,CAhEM;KAAMX,S","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport TagContext from '../context/TagContext';\r\nimport '../css/style.css';\r\n\r\n/**\r\n * @returns A form for tags to be added.\r\n */\r\nexport const TagsInput = () => {\r\n\t/**\r\n\t *\r\n\t * @param {Array} tags - An array (state) of all the stored tags.\r\n\t * @param {Function} onChangeSetTags - A function that sets the state of the tags array.\r\n\t * @returns A tag\r\n\t */\r\n\tconst addTag = (tags, onChangeSetTags) => {\r\n\t\treturn (event) => {\r\n\t\t\tif (event.key !== 'Enter') return;\r\n\t\t\tconst keyValue = event.target.value;\r\n\t\t\tif (!keyValue.trim()) return;\r\n\t\t\tonChangeSetTags([...tags, keyValue]);\r\n\t\t\tevent.target.value = '';\r\n\t\t};\r\n\t};\r\n\r\n\t// /**\r\n\t//  *\r\n\t//  * @param {Array} tags - An array (state) of all the stored tags.\r\n\t//  * @param {Function} onChangeSetTags - A function that sets the state of the tags array.\r\n\t//  * @param {Number} index - The index of the individual tag to be removed.\r\n\t//  */\r\n\t// const removeTag = (tags, onChangeSetTags, index) => {\r\n\t// \tonChangeSetTags(tags.filter((item, i) => index !== i));\r\n\t// };\r\n\r\n\t/**\r\n\t *\r\n\t * @param {Object} tagInfo - the information on the individual tag.\r\n\t * @param {Array} tags - An array (state) of all the stored tags.\r\n\t * @returns A rendered form of tags.\r\n\t */\r\n\tconst renderTag = (tagInfo) => {\r\n\t\treturn (\r\n\t\t\t<div className=\"d-flex flex-column \">\r\n\t\t\t\t<div className=\"tags-input-container d-flex flex-row w-50 mt-2 mb-1\">\r\n\t\t\t\t\t{tagInfo.tags.map((tag, index) => (\r\n\t\t\t\t\t\t<div className=\"tag-item rounded p-2 m-1\" key={index}>\r\n\t\t\t\t\t\t\t<span className=\" tag-item-text\">{tag}</span>\r\n\t\t\t\t\t\t\t{/* <span\r\n\t\t\t\t\t\t\t\tclassName=\"text\"\r\n\t\t\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\t\t\tremoveTag(tagInfo.tags, tagInfo.onChangeSetTags, index)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t&times;\r\n\t\t\t\t\t\t\t</span> */}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName=\"tags-input \"\r\n\t\t\t\t\tonKeyDown={addTag(tagInfo.tags, tagInfo.onChangeSetTags)}\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tplaceholder=\"Add a tag\"\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<TagContext.Consumer>{(tagInfo) => renderTag(tagInfo)}</TagContext.Consumer>\r\n\t);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}