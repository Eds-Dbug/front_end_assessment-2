{"ast":null,"code":"import _toConsumableArray from\"C:/Users/edgar/Documents/Code/front_end_assessment-2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import TagContext from'../context/TagContext';import'../css/style.css';/**\r\n * @returns A form for tags to be added.\r\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var TagsInput=function TagsInput(){/**\r\n\t *\r\n\t * @param {Array} tags - An array (state) of all the stored tags.\r\n\t * @param {Function} onChangeSetTags - A function that sets the state of the tags array.\r\n\t * @returns A tag\r\n\t */var addTag=function addTag(tags,onChangeSetTags){return function(event){if(event.key!=='Enter')return;var keyValue=event.target.value;if(!keyValue.trim())return;onChangeSetTags([].concat(_toConsumableArray(tags),[keyValue]));event.target.value='';};};// /**\n//  *\n//  * @param {Array} tags - An array (state) of all the stored tags.\n//  * @param {Function} onChangeSetTags - A function that sets the state of the tags array.\n//  * @param {Number} index - The index of the individual tag to be removed.\n//  */\n// const removeTag = (tags, onChangeSetTags, index) => {\n// \tonChangeSetTags(tags.filter((item, i) => index !== i));\n// };\n/**\r\n\t *\r\n\t * @param {Object} tagInfo - the information on the individual tag.\r\n\t * @param {Array} tags - An array (state) of all the stored tags.\r\n\t * @returns A rendered form of tags.\r\n\t */var renderTag=function renderTag(tagInfo){return/*#__PURE__*/_jsxs(\"div\",{className:\"d-flex flex-column \",children:[/*#__PURE__*/_jsx(\"div\",{className:\"tags-input-container d-flex flex-row w-50 mt-2 mb-1\",children:tagInfo.tags.map(function(tag,index){return/*#__PURE__*/_jsx(\"div\",{className:\"tag-item rounded p-2 m-1\",children:/*#__PURE__*/_jsx(\"span\",{className:\" tag-item-text\",children:tag})},index);})}),/*#__PURE__*/_jsx(\"input\",{className:\"tags-input \",onKeyDown:addTag(tagInfo.tags,tagInfo.onChangeSetTags),type:\"text\",placeholder:\"Add a tag\"})]});};return/*#__PURE__*/_jsx(TagContext.Consumer,{children:function children(tagInfo){return renderTag(tagInfo);}});};","map":{"version":3,"sources":["C:/Users/edgar/Documents/Code/front_end_assessment-2/src/components/TagsInput.js"],"names":["TagContext","TagsInput","addTag","tags","onChangeSetTags","event","key","keyValue","target","value","trim","renderTag","tagInfo","map","tag","index"],"mappings":"kJAAA,MAAOA,CAAAA,UAAP,KAAuB,uBAAvB,CACA,MAAO,kBAAP,CAEA;AACA;AACA,G,wFACA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CAC9B;AACD;AACA;AACA;AACA;AACA,IACC,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,IAAD,CAAOC,eAAP,CAA2B,CACzC,MAAO,UAACC,KAAD,CAAW,CACjB,GAAIA,KAAK,CAACC,GAAN,GAAc,OAAlB,CAA2B,OAC3B,GAAMC,CAAAA,QAAQ,CAAGF,KAAK,CAACG,MAAN,CAAaC,KAA9B,CACA,GAAI,CAACF,QAAQ,CAACG,IAAT,EAAL,CAAsB,OACtBN,eAAe,8BAAKD,IAAL,GAAWI,QAAX,GAAf,CACAF,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAqB,EAArB,CACA,CAND,CAOA,CARD,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACD;AACA;AACA;AACA;AACA,IACC,GAAME,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,OAAD,CAAa,CAC9B,mBACC,aAAK,SAAS,CAAC,qBAAf,wBACC,YAAK,SAAS,CAAC,qDAAf,UACEA,OAAO,CAACT,IAAR,CAAaU,GAAb,CAAiB,SAACC,GAAD,CAAMC,KAAN,qBACjB,YAAK,SAAS,CAAC,0BAAf,uBACC,aAAM,SAAS,CAAC,gBAAhB,UAAkCD,GAAlC,EADD,EAA+CC,KAA/C,CADiB,EAAjB,CADF,EADD,cAgBC,cACC,SAAS,CAAC,aADX,CAEC,SAAS,CAAEb,MAAM,CAACU,OAAO,CAACT,IAAT,CAAeS,OAAO,CAACR,eAAvB,CAFlB,CAGC,IAAI,CAAC,MAHN,CAIC,WAAW,CAAC,WAJb,EAhBD,GADD,CAyBA,CA1BD,CA4BA,mBACC,KAAC,UAAD,CAAY,QAAZ,WAAsB,kBAACQ,OAAD,QAAaD,CAAAA,SAAS,CAACC,OAAD,CAAtB,EAAtB,EADD,CAGA,CAhEM","sourcesContent":["import TagContext from '../context/TagContext';\r\nimport '../css/style.css';\r\n\r\n/**\r\n * @returns A form for tags to be added.\r\n */\r\nexport const TagsInput = () => {\r\n\t/**\r\n\t *\r\n\t * @param {Array} tags - An array (state) of all the stored tags.\r\n\t * @param {Function} onChangeSetTags - A function that sets the state of the tags array.\r\n\t * @returns A tag\r\n\t */\r\n\tconst addTag = (tags, onChangeSetTags) => {\r\n\t\treturn (event) => {\r\n\t\t\tif (event.key !== 'Enter') return;\r\n\t\t\tconst keyValue = event.target.value;\r\n\t\t\tif (!keyValue.trim()) return;\r\n\t\t\tonChangeSetTags([...tags, keyValue]);\r\n\t\t\tevent.target.value = '';\r\n\t\t};\r\n\t};\r\n\r\n\t// /**\r\n\t//  *\r\n\t//  * @param {Array} tags - An array (state) of all the stored tags.\r\n\t//  * @param {Function} onChangeSetTags - A function that sets the state of the tags array.\r\n\t//  * @param {Number} index - The index of the individual tag to be removed.\r\n\t//  */\r\n\t// const removeTag = (tags, onChangeSetTags, index) => {\r\n\t// \tonChangeSetTags(tags.filter((item, i) => index !== i));\r\n\t// };\r\n\r\n\t/**\r\n\t *\r\n\t * @param {Object} tagInfo - the information on the individual tag.\r\n\t * @param {Array} tags - An array (state) of all the stored tags.\r\n\t * @returns A rendered form of tags.\r\n\t */\r\n\tconst renderTag = (tagInfo) => {\r\n\t\treturn (\r\n\t\t\t<div className=\"d-flex flex-column \">\r\n\t\t\t\t<div className=\"tags-input-container d-flex flex-row w-50 mt-2 mb-1\">\r\n\t\t\t\t\t{tagInfo.tags.map((tag, index) => (\r\n\t\t\t\t\t\t<div className=\"tag-item rounded p-2 m-1\" key={index}>\r\n\t\t\t\t\t\t\t<span className=\" tag-item-text\">{tag}</span>\r\n\t\t\t\t\t\t\t{/* <span\r\n\t\t\t\t\t\t\t\tclassName=\"text\"\r\n\t\t\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\t\t\tremoveTag(tagInfo.tags, tagInfo.onChangeSetTags, index)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t&times;\r\n\t\t\t\t\t\t\t</span> */}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName=\"tags-input \"\r\n\t\t\t\t\tonKeyDown={addTag(tagInfo.tags, tagInfo.onChangeSetTags)}\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tplaceholder=\"Add a tag\"\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<TagContext.Consumer>{(tagInfo) => renderTag(tagInfo)}</TagContext.Consumer>\r\n\t);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}